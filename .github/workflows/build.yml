name: build-and-release-pikesquares

on:
  workflow_run:
    workflows: [Bump version]
    types: [completed]
  workflow_dispatch:

  push:
    branches:
      - master
    tags:
      - "v*.*.*"
    paths-ignore:
      - '**.md'
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/**'
      - '!.github/workflows/build.yml'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:
  org-check:
    name: Check GitHub Organization
    if: github.repository_owner == 'EloquentBits'
    runs-on: ubuntu-latest
    steps:
      - name: Noop
        run: "true"
  wheels:
    name: "${{ matrix.py }} ${{ matrix.os }} ${{ matrix.arch }} wheels"
    needs: org-check
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        os: [linux, macos]
        arch: [x86_64, arm64]
        include:
          - {
              "os": "linux", 
              "py": "cp312", 
              "arch": "x86_64", 
              "runner": "ubuntu-latest", 
              "cibw-wheel-suffix": "manylinux_2_17_x86_64.manylinux2014_x86_64",
              "pip-cache-path": "~/.cache/pip" }
          - {
              "os": "macos", 
              "py": "cp312", 
              "arch": "x86_64", 
              "runner": "macos-13", 
              "cibw-wheel-suffix": "macosx_13_0_x86_64",
              "pip-cache-path": "~/Library/Caches/pip" }

          - {
              "os": "macos", 
              "py": "cp312", 
              "arch": "arm64", 
              "runner": "macos-14", 
              "cibw-wheel-suffix": "macosx_13_0_arm64",
              "pip-cache-path": "~/Library/Caches/pip"}
        exclude:
          - os: linux
            arch: arm64
      fail-fast: false

    env:
      MATRIX_ID: "${{ matrix.py }}-${{ matrix.os }}-${{ matrix.arch }}"
      PIKESQUARES_PEX_NAME: pikesquares-${{ matrix.os }}-${{ matrix.arch }}.pex

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - uses: actions/cache@v3
        name: pip cache
        with:
          path: ${{ matrix.pip-cache-path }}
          key: ${{ matrix.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
           ${{ matrix.os }}-pip-

      - name: pip install pex etc 
        shell: bash
        run: |
          pip install twine build pex commitizen

      - name: Read Project Version
        id: project-version
        run: echo "version=$(cz version -p)" >> "$GITHUB_OUTPUT"

      - name: Display Project Version
        run: echo "${{steps.project-version.outputs.version}}"

      - name: build pikesquares wheel
        shell: bash
        run: |
          python -m build . --wheel
          ls -l dist

      - name: build pex
        shell: bash

        # https://pypi.vc.eloquentbits.com/packages/
        # pikesquares_pyuwsgi-2.0.24.post0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
        #  "${{ secrets.PYPI_URL }}/pikesquares_pyuwsgi-2.0.24.post0-${{ matrix.py }}-${{ matrix.py }}-${{ matrix.cibw-wheel-suffix}}.whl" \
        #
        # pyuwsgi-2.0.28.post1-cp312-cp312-macosx_13_0_arm64.whl (575.7 KB) 
        # pyuwsgi-2.0.28.post1-cp312-cp312-macosx_13_0_x86_64.whl (2.7 MB)  
        # pyuwsgi-2.0.28.post1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

        run: |
          pex \
            dist/pikesquares-"${{steps.project-version.outputs.version}}"-py3-none-any.whl \
            "https://pypi.vc.eloquentbits.com/packages/pyuwsgi-2.0.28.post1-${{ matrix.py }}-${{ matrix.py }}-${{ matrix.cibw-wheel-suffix}}.whl" \
            -r requirements.txt \
            --venv \
            --entry-point pikesquares.cli.cli:app \
            -o pikesquares-${{ matrix.os }}-${{ matrix.arch }}.pex

      - uses: actions/upload-artifact@v4
        with:
          name: bundle-${{ env.PIKESQUARES_PEX_NAME }}
          path: ${{ env.PIKESQUARES_PEX_NAME }}
          retention-days: 1

  gh-release:
    name: Prepare github release
    runs-on: ubuntu-latest
    needs: wheels
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: pip install commitizen
        shell: bash
        run: |
          pip install commitizen

      - name: Read Project Version
        id: project-version
        run: echo "version=$(cz version -p)" >> "$GITHUB_OUTPUT"

      - name: Display Project Version
        run: echo "${{steps.project-version.outputs.version}}"

      - uses: actions/download-artifact@v4
        with:
          path: bundle
          pattern: bundle-*
          merge-multiple: true

      #- uses: actions/download-artifact@v4
      #  with:
      #    name: changelog-${{steps.project-version.outputs.version}}
      #    github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # token with actions:read permissions on target repo
      #    run-id: 1234

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          #body_path: "changelog-${{steps.project-version.outputs.version}}"
          tag_name: "${{steps.project-version.outputs.version}}"
          files: |
            bundle/*

      # Runs the telegram notify action to send a notification
      #- name: Telegram Notify
      #  uses: appleboy/telegram-action@master
      #  with:
      #    to: ${{ secrets.TELEGRAM_ID }}
      #    token: ${{ secrets.TELEGRAM_TOKEN }}
      #    format: markdown
      #    message: |
      #      A new PR is raised [View all PR's](https://github.com/<user>/<repo>/pulls)

      - name: Announce on Telegram ðŸ“¢ 
        uses: appleboy/telegram-action@master
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            *  ðŸš€ v${{steps.project-version.outputs.version}} release has been created*
            Repository: *${{ github.repository }}*
            Branch: *${{ github.ref }}*

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
        with:
          environment: production
          version: "${{steps.project-version.outputs.version}}"
