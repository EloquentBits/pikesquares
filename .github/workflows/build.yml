name: build-and-release-pikesquares

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags:
      - '**'

permissions:
  contents: write

jobs:
  build-and-publish-binary:
    strategy:
      matrix:
        # macos-latest-large - intel, macos-latest-xlarge - apple silicon
        platform: [ arm64 ] 
        architecture: [ aarch64 ]
        python-version: [ "3.11", ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
        
      - name: Install dependencies
        if: false
        shell: bash
        run: |
          python -m pip install -U build pex

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        with:
          output-dir: dist
          package-dir: ./uwsgi
        env:
          #CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_BUILD_LINUX: cp311-manylinux_x86_64
          CIBW_BUILD_MACOS: cp311-macosx_arm64
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2014_x86_64:latest
          #CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ARCHS_LINUX: x86_64
          CIBW_BUILD_VERBOSITY: 5
          #CIBW_ARCHS_MACOS: x86_64
          # cross-compile for arm64 on macos isn't working yet
          # https://github.com/lincolnloop/pyuwsgi-wheels/issues/18
          # CIBW_ARCHS_MACOS: x86_64 arm64
          # tesing on emulated arm64 isn't supported for MacOS
          # CIBW_TEST_SKIP: "*-macosx_arm64"
          CIBW_ENVIRONMENT: APPEND_VERSION=".post0" UWSGI_PROFILE=pikesquares
          #CIBW_TEST_COMMAND: pyuwsgi --help
          CIBW_BEFORE_ALL: ./patch-uwsgi-packaging.sh uwsgi
          CIBW_BEFORE_BUILD_MACOS: IS_MACOS=1 ./pre_build.sh
          CIBW_BEFORE_BUILD_LINUX: ./pre_build.sh && (yum install -y openssl-devel zlib-devel zeromq-devel libsqlite3x-devel.x86_64 || apk add zlib-dev)
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

          #CIBW_BEFORE_ALL: "yum install -y pcre-devel jansson-devel openssl-devel avahi-devel zlib-devel zeromq-devel libsqlite3x-devel.x86_64"
      #run: |
      #    cp setup.py uwsgi/
      #    /usr/local/bin/cibuildwheel \
      #      --platform linux \
      #      --output-dir dist \
      #      uwsgi

      - name: Create sdist
        run: |
          rm -rf uwsgi && git submodule update --init
          pipx run build --sdist --outdir dist uwsgi
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist



      #- name: Build CLI wheel
      #  shell: bash
      #  run: |
      #    python -m build . --wheel

      - name: Build PEX
        if: false
        shell: bash
        env:
          PEX_TOOLS: 1
        run: |
          pex -vvv \
            dist/pikesquares-* \
            -r requirements.txt \
            --venv \
            --include-tools \
            --python $(which python) \
            --entry-point pikesquares.cli.cli:app \
            --disable-cache \
            --no-emit-warnings \
            -o pikesquares-cli.pex
        
      - name: Build executable binary (science)
        if: false
        shell: bash
        env:
          LATEST_SCIENCE_VERSION: "v0.3.0"
        run: |
          curl -Lo "/tmp/science" https://github.com/a-scie/lift/releases/download/${{ env.LATEST_SCIENCE_VERSION }}/science-${{ runner.os }}-${{ matrix.architecture }}
          chmod +x /tmp/science
          /tmp/science lift \
            --file pikesquares=pikesquares-cli.pex build \
            --use-platform-suffix \
            --hash sha256 \
            pikesquares.toml
      
      - name: Upload pikesquares binary as artifact
        if: false
        uses: actions/upload-artifact@v3
        with:
          name: pike-squares-macos-${{ matrix.architecture }}
          path: pike-squares-macos-${{ matrix.architecture }}

      - name: Publish binary to cdn - Linux
        shell: bash
        if: runner.os == 'Linux' && false
        env:
          PLATFORM: "linux"
        run: |
            curl --request PUT \
            --header 'AccessKey: ${{ secrets.CDN_ACCESS_TOKEN }}' \
            --header 'Content-Type: application/octet-stream' \
            --header 'accept: application/json'  \
            --data-binary @pike-squares-${{ env.PLATFORM }}-${{ matrix.architecture }} \
            https://${{ secrets.CDN_URL }}/${{ secrets.CDN_PROJECT_NAME }}/pikesquares-${{ env.PLATFORM }}-${{ matrix.architecture }}

      - name: Publish binary to cdn - Mac OS
        shell: bash
        if: runner.os == 'macOS' && false
        env:
          PLATFORM: "macos"
        run: |
            curl --request PUT \
            --header 'AccessKey: ${{ secrets.CDN_ACCESS_TOKEN }}' \
            --header 'Content-Type: application/octet-stream' \
            --header 'accept: application/json'  \
            --data-binary @pike-squares-${{ env.PLATFORM }}-${{ matrix.architecture }} \
            https://${{ secrets.CDN_URL }}/${{ secrets.CDN_PROJECT_NAME }}/pikesquares-${{ env.PLATFORM }}-${{ matrix.architecture }}

  build-macos-pkg-installer:
    strategy:
      matrix:
        architecture: [ aarch64 ]
        python-version: [ "3.11", "3.12" ]
        platform: [ macos-latest-arm64 ] # macos-latest-large - intel, macos-latest-xlarge - apple silicon
    runs-on: ${{ matrix.platform }}
    needs: [ build-and-publish-binary ]
    steps:
      - uses: actions/checkout@v4
        if: false
        with:
            fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        if: false
        uses: actions/setup-python@v4
        with:
            python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        if: false
        shell: bash
        run: |
            python -m pip install -U jinja2
        
      - name: Checkout pikesquares Mac OS Installer Builder (MIB) repo
        if: false
        uses: actions/checkout@v4
        with:
            repository: EloquentBits/pikesquares-mib
            path: ./mib

      - name: Restore cached pikesquares binary for mac
        if: false
        uses: actions/download-artifact@v3
        with:
            name: pike-squares-macos-${{ matrix.architecture }}
            path: ./mib/_files/binary

      - name: Run Mac OS Installer Builder (MIB)
        if: false
        shell: bash
        working-directory: ./mib
        run: |
            mv _files/binary/pike-squares-macos-${{ matrix.architecture }} _files/binary/pikesquares
            ls -R _files
            python mib.py --config mib.toml
            mv pikesquares-installer.pkg pike-squares-macos-${{ matrix.architecture }}-${{ github.ref_name }}.pkg
      - name: Show install logs
        if: false
        shell: bash
        run: |
          cat ~/Library/Logs/pikesquares/pikesquares-script-postinstall.log
      - name: Show built installer in folder
        if: false
        shell: bash
        run: |
          ls -lah ./mib/
      - name: Release installer
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && false
        with:
          name: PikeSquares Mac OS Installer v${{ github.ref_name }}
          body: |
            Release of PikeSquares Mac OS Installer v${{ github.ref_name }}
          files: |
            ./mib/pike-squares-macos-${{ matrix.architecture }}-${{ github.ref_name }}.pkg
