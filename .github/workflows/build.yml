name: build-and-release-pikesquares

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags:
      - '**'
    paths-ignore:
      - '**.md'
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/**'
      - '!.github/workflows/build.yml'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:

  linux-python3:
    name: Python 3 Linux
    runs-on: ubuntu-latest
    #needs: linux-python3-11
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        python_build: [cp311-*, ]
        manylinux: [manylinux2014,]
        isRelease:
          - ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' }}
        exclude:
          # Speed things up a bit for non-releases
          - isRelease: false
            arch: aarch64
    env:
      #CIBW_BUILD: ${{ matrix.python_build}}
      CIBW_BUILD: cp311-manylinux_x86_64
      CIBW_SKIP: '*-musllinux_aarch64'
      CIBW_ARCHS: ${{ matrix.arch == 'aarch64' && 'aarch64' || 'auto64' }}
      CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.manylinux }}
      CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux }}
      CIBW_BUILD_VERBOSITY: 5
      CIBW_ENVIRONMENT: APPEND_VERSION=".post0" UWSGI_PROFILE=pikesquares
      #CIBW_TEST_COMMAND: pyuwsgi --help
      CIBW_BEFORE_ALL: ./scripts/patch-uwsgi-packaging.sh uwsgi
      CIBW_BEFORE_BUILD_LINUX: yum install -y openssl-devel zlib-devel zeromq-devel libsqlite3x-devel.x86_64 pcre-devel jansson-devel 
      #CIBW_BEFORE_BUILD_MACOS: IS_MACOS=1 ./pre_build.sh 
      #CIBW_BEFORE_BUILD_LINUX: ./pre_build.sh && 
      #  (apk add openssl-dev zeromq-dev sqlite-dev zlib-dev || 
      #  yum install -y openssl-devel zlib-devel zeromq-devel libsqlite3x-devel.x86_64)
      #CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

    steps:
    - uses: actions/checkout@v3
      if: false
      with:
        submodules: true
        fetch-depth: 0

    #- uses: ./.github/actions/manylinux_2014
    #  with:
    #    ccache: 1
    #    python_alias: 1
    #    openssl: 1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      if: ${{ matrix.arch == 'aarch64' }} && false

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install
      if: false
      shell: bash
      run: |
        pip install 'cibuildwheel>=2.16.2' twine build

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.python_build }}
        #save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}

    - name: Build
      if: false
      shell: bash
      run: |
        export DISTUTILS_C_COMPILER_LAUNCHER=ccache
        # TODO: Use ccache inside container, see https://github.com/pypa/cibuildwheel/issues/1030
        #if [[ "$GITHUB_REF" =~ ^refs/tags/v.+$ ]] ; then
        #  export CIBW_TEST_COMMAND='python -m pytest {project}/tests/fast/api/test_dbapi00.py  --verbose'
        #fi
        cibuildwheel --output-dir wheelhouse uwsgi
        ls wheelhouse

    #pikesquares_binary-0.3.22-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
    - uses: actions/upload-artifact@v4
      if: false
      with:
        name: pikesquares-binary-cp311-manylinux_x86_64
        path: ./wheelhouse/*.whl

  osx-python3:
    name: Python 3 OSX
    runs-on: macos-latest-xlarge
    #needs: linux-python3-11
    strategy:
      matrix:
        python_build: [cp311-*, ]
    env:
      #CIBW_BUILD: ${{ matrix.python_build}}
      #cp311-macosx_x86_64
      #cp311-macosx_universal2
      #cp311-macosx_arm64
      CIBW_BUILD: cp311-macosx_x86_64 cp311-macosx_universal2 cp311-macosx_arm64
      CIBW_ARCHS: 'x86_64 universal2 arm64'
      CIBW_BUILD_VERBOSITY: 5
      CIBW_ENVIRONMENT: APPEND_VERSION=".post0" UWSGI_PROFILE=pikesquares PATH=$PATH:"/usr/local/bin"
      #CIBW_TEST_COMMAND: pyuwsgi --help
      CIBW_BEFORE_ALL: ./scripts/patch-uwsgi-packaging.sh uwsgi
      #CIBW_BEFORE_BUILD: IS_MACOS=1 ./scripts/pre_build.sh

      #CIBW_BEFORE_BUILD_LINUX: yum install -y openssl-devel zlib-devel zeromq-devel libsqlite3x-devel.x86_64 pcre-devel jansson-devel 
      #CIBW_BEFORE_BUILD_LINUX: ./pre_build.sh && 
      #  (apk add openssl-dev zeromq-dev sqlite-dev zlib-dev || 
      #  yum install -y openssl-devel zlib-devel zeromq-devel libsqlite3x-devel.x86_64)
      #CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

    steps:
    - run: brew install zeromq
    - run: brew install jansson
    - run: brew install pcre

    - uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install
      shell: bash
      run: |
        pip install 'cibuildwheel>=2.16.2' twine build

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.python_build }}
        #save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}

    - name: Build
      shell: bash
      run: |
        export DISTUTILS_C_COMPILER_LAUNCHER=ccache
        # TODO: Use ccache inside container, see https://github.com/pypa/cibuildwheel/issues/1030
        #if [[ "$GITHUB_REF" =~ ^refs/tags/v.+$ ]] ; then
        #  export CIBW_TEST_COMMAND='python -m pytest {project}/tests/fast/api/test_dbapi00.py  --verbose'
        #fi
        cibuildwheel --output-dir wheelhouse uwsgi
        ls wheelhouse

    #pikesquares_binary-0.3.22-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
    - uses: actions/upload-artifact@v4
      with:
        name: pikesquares-binary-cp311-manylinux_x86_64
        path: ./wheelhouse/*.whl


