name: build-and-release-pikesquares

on:
  workflow_run:
    workflows: [Bump version]
    types: [completed]
  workflow_dispatch:

  push:
    branches:
      - master
    tags:
      - "v*.*.*"
    paths-ignore:
      - '**.md'
      - 'scripts/**'
      - 'tests/**'
      - '.github/workflows/**'
      - '!.github/workflows/build.yml'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:
  wheels:
    name: "${{ matrix.py }} ${{ matrix.os }} ${{ matrix.arch }} wheels"
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        os: [linux, macos]
        arch: [x86_64, arm64]
        include:
          - {
              "os": "linux", 
              "py": "cp312", 
              "arch": "x86_64", 
              "runner": "ubuntu-latest", 
              "cibw-wheel-suffix": "manylinux_2_17_x86_64.manylinux2014_x86_64",
              "pip-cache-path": "~/.cache/pip" }
          - {
              "os": "macos", 
              "py": "cp312", 
              "arch": "x86_64", 
              "runner": "macos-latest", 
              "cibw-wheel-suffix": "macosx_10_9_x86_64",
              "pip-cache-path": "~/Library/Caches/pip" }

          - {
              "os": "macos", 
              "py": "cp312", 
              "arch": "arm64", 
              "runner": "macos-latest-xlarge", 
              "cibw-wheel-suffix": "macosx_11_0_arm64",
              "pip-cache-path": "~/Library/Caches/pip"}
        exclude:
          - os: linux
            arch: arm64
      fail-fast: false

    env:
      MATRIX_ID: "${{ matrix.py }}-${{ matrix.os }}-${{ matrix.arch }}"
      SCIENCE_BINARY_VERSION: "v0.3.0"
      SCIENCE_BINARY_ARCH: ${{ matrix.arch == 'arm64' && 'aarch64' || 'x86_64' }}
      SCIENCE_BINARY_NAME: science-v0.3.0-${{ matrix.os }}-${{ matrix.arch }}
      PIKESQUARES_BINARY_NAME: pikesquares-${{ matrix.os }}-${{ matrix.arch == 'arm64' && 'aarch64' || 'x86_64' }}

    steps:
      #- name: install deps from homebrew for x86_64
      #  if: ${{ matrix.os == 'macos' && matrix.arch == 'x86_64'}}
      #  shell: bash
      #  run: |
      #    brew install zeromq jansson pcre
      #- name: install deps from homebrew for arm64
      #  if: ${{ matrix.os == 'macos' && matrix.arch == 'arm64'}}
      #  shell: bash
      #  run: |
      #    brew install autoconf libtool automake jansson pcre

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - uses: actions/cache@v3
        name: pip cache
        with:
          path: ${{ matrix.pip-cache-path }}
          key: ${{ matrix.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
           ${{ matrix.os }}-pip-

      - name: pip install pex etc 
        shell: bash
        run: |
          pip install twine build pex commitizen

      - name: Read Project Version
        id: project-version
        run: echo "version=$(cz version -p)" >> "$GITHUB_OUTPUT"

      - name: Display Project Version
        run: echo "${{steps.project-version.outputs.version}}"

      - uses: actions/cache@v3
        id: science-binary
        name: cache science binary
        with:
          path: ${{ env.SCIENCE_BINARY_NAME }}
          key: ${{ env.SCIENCE_BINARY_NAME }}

      - name: science binary download aarch64
        if: ${{ steps.science-binary.outputs.cache-hit != 'true' }}  
        shell: bash
        run: |
          curl -Lo "${{ env.SCIENCE_BINARY_NAME }}" https://github.com/a-scie/lift/releases/download/${{ env.SCIENCE_BINARY_VERSION }}/science-${{ matrix.os }}-${{ env.SCIENCE_BINARY_ARCH}}
          chmod +x "${{ env.SCIENCE_BINARY_NAME }}"

      - name: build pikesquares wheel
        shell: bash
        run: |
          python -m build . --wheel
          ls -l dist

      - name: build pex
        shell: bash
        run: |
          pex \
            dist/pikesquares-"${{steps.project-version.outputs.version}}"-py3-none-any.whl \
            "${{ secrets.PYPI_URL }}/pikesquares_pyuwsgi-2.0.24.post0-${{ matrix.py }}-${{ matrix.py }}-${{ matrix.cibw-wheel-suffix}}.whl" \
            sentry-sdk \
            -r requirements.txt \
            --venv \
            --entry-point pikesquares.cli.cli:app \
            -o pikesquares-${{ matrix.os }}-${{ matrix.arch }}.pex

      - name: build scie
        shell: bash
        run: |
          ls -l . 
          ./${{ env.SCIENCE_BINARY_NAME }} --version
          ./${{ env.SCIENCE_BINARY_NAME }} lift \
            --file pikesquares-pex=pikesquares-${{ matrix.os }}-${{ matrix.arch }}.pex \
            build \
            --use-platform-suffix \
            --hash sha256 \
            pikesquares.toml 

      - uses: actions/upload-artifact@v4
        with:
          name: bundle-${{ env.PIKESQUARES_BINARY_NAME }}
          path: ${{ env.PIKESQUARES_BINARY_NAME }}
          retention-days: 1

      - uses: actions/upload-artifact@v4
        with:
          name: bundle-${{ env.PIKESQUARES_BINARY_NAME }}.sha256
          path: ${{ env.PIKESQUARES_BINARY_NAME }}.sha256
          retention-days: 1

      - name: Publish binary to BunnyCDN
        shell: bash
        env:
          CDN_URL: ny.storage.bunnycdn.com
          CDN_PROJECT_NAME: pikesquares-downloads
        run: |
            curl --request PUT \
            --header 'AccessKey: ${{ secrets.BUNNYCDN_ACCESS_TOKEN }}' \
            --header 'Content-Type: application/octet-stream' \
            --header 'accept: application/json'  \
            --data-binary @${{ env.PIKESQUARES_BINARY_NAME }} \
            https://${{ env.CDN_URL }}/${{ env.CDN_PROJECT_NAME }}/${{steps.project-version.outputs.version}}/${{ env.PIKESQUARES_BINARY_NAME }}
          #https://github.com/a-scie/lift/releases/download/v0.3.0/science-linux-x86_64

  gh-release:
    name: Prepare github release
    runs-on: ubuntu-latest
    needs: wheels
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: pip install commitizen
        shell: bash
        run: |
          pip install commitizen

      - name: Read Project Version
        id: project-version
        run: echo "version=$(cz version -p)" >> "$GITHUB_OUTPUT"

      - name: Display Project Version
        run: echo "${{steps.project-version.outputs.version}}"

      - uses: actions/download-artifact@v4
        with:
          path: bundle
          pattern: bundle-*
          merge-multiple: true

      #- uses: actions/download-artifact@v4
      #  with:
      #    name: changelog-${{steps.project-version.outputs.version}}
      #    github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # token with actions:read permissions on target repo
      #    run-id: 1234

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          #body_path: "changelog-${{steps.project-version.outputs.version}}"
          tag_name: "${{steps.project-version.outputs.version}}"
          files: |
            bundle/*
